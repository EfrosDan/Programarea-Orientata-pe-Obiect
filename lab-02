- _Basic Level_ (mark 5 || 6):
#include<iostream>

using namespace std;

class object{
    int height, width, depth;
public:
    object(){
    height=1;
    width=1;
    depth=1;
    }
    object(int a){
    height=a;
    width=a;
    depth=a;
    }
    object(int a,int b,int c){
    height=a;
    width=b;
    depth=c;
    }
    void display(){
    cout << "height=" << height << " width=" << width << " depth=" << depth << endl;
    }
};

int main()
{
    object obj1;
    object obj2(30);
    object obj3(200,420,50);
    cout << "Object 1:" << endl;
    obj1.display();
    cout << "Object 2:" << endl;
    obj2.display();
    cout << "Object 3:" << endl;
    obj3.display();
return 0;
}

 - _Medium Level_ (mark 7 || 8):
#include <iostream>
#include <cstdlib>
#define SIZE 10
using namespace std;
class Queue{
    int *arr;
    int capacity;
    int front;
    int rear;
    int count;

public:
    Queue();
    Queue(int size=SIZE);
    ~Queue();
    void push(int x);
    void pop();
    int peek();
    int size();
    bool isEmpty();
    bool isFull();
};

Queue::Queue(){
    arr = new int[3];
    capacity=3;
    front=0;
    rear=-1;
    count=0;
}
Queue::Queue(int size){
    arr = new int[size];
    capacity=size;
    front=0;
    rear=-1;
    count=0;
}
Queue::~Queue(){
delete[] arr;
}
void Queue::pop(){
    if (isEmpty()){
        cout << "Queue is empty!" << endl;
        exit(EXIT_FAILURE);
    }
    cout << "Removing " << arr[front] << endl;
    front= (front +1)%capacity;
    count--;
}
void Queue::push(int item){
    if(isFull()){
        cout <<"Queue is full!" << endl;
        exit(EXIT_FAILURE);
    }
    cout << "Inserting " << item << " " << endl;

    rear = (rear + 1) % capacity;
    arr[rear] = item;
    count++;
}

int Queue::peek()
{
    if (isEmpty())
    {
        cout << "Queue is empty!" << endl;
        exit(EXIT_FAILURE);
    }
    return arr[front];
}

int Queue::size() {
    return count;
}

bool Queue::isEmpty() {
    return (size() == 0);
}

bool Queue::isFull() {
    return (size() == capacity);
}

int main()
{
    Queue q(5);

    q.push(1);
    q.push(2);
    q.push(3);

    cout << "The front element is " << q.peek() << endl;
    q.pop();

    q.push(4);

    cout << "The queue size is " << q.size() << endl;

    q.pop();
    q.pop();
    q.pop();

    if (q.isEmpty()) {
        cout << "The queue is empty\n";
    }
    else {
        cout << "The queue is not empty\n";
    }

    return 0;
}


- _Advanced Level_ (mark 9 || 10):
#include <iostream>

using namespace std;

class box{
    int height, width, length , area,volume;
public:
    void intput(){
        cout << "Enter length of box: ";
        cin >> length;
        cout << "Enter width of box: ";
        cin>>width;
        cout << "Enter height of box: ";
        cin >>height;
    }
    void display(){
    cout << "height=" << height << " width=" << width << " lenght=" << length << endl;
    }
    int findArea(){
       area=2*(length*width+length*height+width*height);
    }
    void displayArea(){
        cout <<"Area of box is: "<<area<< "cm"<< endl;
    }
    int findVolume(){
        volume=length*width*height;
    }
    void displayVolume(){
        cout <<"Volume of box is: "<<volume<< "cm";
    }
};

int main()
{
   box surface;

   surface.intput();
   surface.display();
   surface.findArea();
   surface.displayArea();
   surface.findVolume();
   surface.displayVolume();
return 0;
}


#include <iostream>
#include <list>
using namespace std;

class Queue{
    int marime;
    int max_size;
    bool is_limited;
    list <int> elements;
public:
    Queue(){
        this->marime=0;
        this->is_limited=false;
    }
    Queue (int max_size){
        this->marime=0;
        this->is_limited=true;
        this->max_size=max_size;
    }
    bool is_empty(){
        return this->marime == 0 ? true:false;
    }
    bool is_full(){
        if (this-> is_limited == false)
            cout << " Queue is never full" << endl;
        return this->marime == this ->max_size;
        }
    int size(){
        return this->marime;
    }
    int front(){
        return this->elements.front();
    }
    int back(){
        return this->elements.back();
    }
    void push (int value){
        if (this->is_limited && this->marime == this->max_size)
            return;
        this->elements.push_back(value);
        this->marime++;
    }
    void pop(){
        this->elements.pop_front();
        this->marime--;
    }
};
int main()
{
    Queue q (1);
    q.push(3);
    q.push(0);
    q.push(1);
    q.push(2);

    Queue a_doua;
    a_doua.is_full ();

    cout << " " << q.front () << endl;

    if (q.is_empty()) {
        cout << "The queue is empty\n";
    }
    else {
        cout << "The queue is not empty\n";
    }
}

